// Copyright 2020 Hayley Schluter. All rights reserved.

// If a heading has been found with the right text content, scroll to it.
const scrollToRecipe = (heading) => {
	if (heading !== null && heading !== undefined) {
		heading.scrollIntoView({ behavior: 'smooth', block: 'start' });
	}
}

// makes it so that scrolling to this element still displays element in view
const styleHeading = (heading) => {
	heading.style.scrollMargin = '100px';
};

// Search through all header elements on the page. if one is found equaling the word "Ingredients", return it.
const findRecipeHeadings = (options) => {
	const headingsOnPage = document.querySelectorAll("h1, h2, h3, h4, h5");
	// regex which allows for two characters before and after 'ingredients'
	const regex = /^.{0,2}ingredients.{0,2}$/i;

	for (let i = 0; i < headingsOnPage.length; ++i) {
		const headingText = headingsOnPage[i].textContent.toLowerCase();

		// if 'ingredients' heading is found, break from the loop and return the element.
		if (regex.test(headingText)) {
			styleHeading(headingsOnPage[i]);
			return headingsOnPage[i];
		}
	}

	return null;
};

const findRecipeAndScroll = () => {
	const recipeHeading = findRecipeHeadings();
	scrollToRecipe(recipeHeading);
}

// expand or minimize scroll button on page
const toggleExpand = (e, scrollBtnText, icon) => {
	const val = e.target.textContent;

    // if user is minimizing, hide text.
    if (val === '>') { 
    	 e.target.textContent = '<';
    	 scrollBtnText.classList.add('hidden');

    // otherwise user is expanding, so show text.    
    } else { 
    	e.target.textContent = '>';
    	 scrollBtnText.classList.remove('hidden');
    }
}

// populate the page with a button that onclick scrolls user to recipe
const renderScrollButton = (buttonClick) => {
	// create container for buttons and give it a class
	const btnContainer = document.createElement('div');
	btnContainer.classList.add('__recipe_extension__');

	// create button that does the scrolling
	const scrollBtn = document.createElement('button');
	scrollBtn.classList.add('scroll');

	// create icon image element and add it to scroll button
	const icon = document.createElement('IMG');
	/* images from chrome extensions have a special path generated by chrome. 
	   use that, AND make it accessible to the page by adding image path to "web_accessible_resources" array in manifest.json.
	   resource: https://stackoverflow.com/questions/6165590/loading-an-image-from-a-chrome-extension-on-a-page/12084894 */
	icon.src = chrome.extension.getURL('/images/favicon32-white.png');
	scrollBtn.appendChild(icon);

	// create span element and add it to scroll button
	const scrollBtnText = document.createElement('span');
	scrollBtnText.textContent += 'Scroll to recipe';
	scrollBtn.appendChild(scrollBtnText);

	scrollBtn.onclick = buttonClick;

	// add button to container
	btnContainer.appendChild(scrollBtn);

	// create second button which will be the expand/minimize option
	const toggleExpandBtn = document.createElement('button');
	toggleExpandBtn.classList.add('toggle_expand');
	toggleExpandBtn.textContent = '>';
	toggleExpandBtn.onclick = (e) => toggleExpand(e, scrollBtnText, icon);

	// add second button to container
	btnContainer.appendChild(toggleExpandBtn);
	
	//add the whole thing to the page
	document.body.appendChild(btnContainer);
};

setTimeout(() => {
	const heading = findRecipeHeadings(); 
    // if heading exists, render a button in the DOM with the option to scroll to that heading.
	if (heading !== null && heading !== undefined) {
		const buttonClick = () => scrollToRecipe(heading);
		renderScrollButton(buttonClick);
	}
}, 500);